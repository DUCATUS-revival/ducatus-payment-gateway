yarn run v1.3.2
$ node src/
info: Feathers application started on http://localhost:3030
Flushed database
{ data: {},
  params: { query: {}, route: {}, provider: 'rest' },
  type: 'before',
  returnHook: true,
  service: 
   { Model: 
      Datastore {
        inMemoryOnly: false,
        autoload: true,
        timestampData: false,
        filename: '/root/ducatus-payment/data/request-payment.db',
        compareStrings: undefined,
        persistence: [Persistence],
        executor: [Executor],
        indexes: [Object],
        ttlIndexes: {} },
     events: [],
     id: '_id',
     paginate: { default: 10, max: 50 },
     find: [Function],
     get: [Function],
     create: [Function],
     patch: [Function],
     update: [Function],
     remove: [Function],
     hooks: [Function: hooks],
     domain: undefined,
     _events: 
      { created: [Function],
        updated: [Function],
        removed: [Function],
        patched: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     publish: [Function: publish],
     _eventsCount: 4,
     _super: undefined,
     [Symbol(feathers-channels/publishers)]: {} },
  app: 
   { [EventEmitter: app]
     domain: undefined,
     _events: 
      { mount: [Function: onmount],
        publish: [Function],
        connection: [Function],
        login: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     getMaxListeners: [Function: getMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     prependListener: [Function: prependListener],
     once: [Function: once],
     prependOnceListener: [Function: prependOnceListener],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     listenerCount: [Function: listenerCount],
     eventNames: [Function: eventNames],
     init: [Function: init],
     defaultConfiguration: [Function: defaultConfiguration],
     lazyrouter: [Function: lazyrouter],
     handle: [Function: handle],
     use: [Function],
     route: [Function: route],
     engine: [Function: engine],
     param: [Function: param],
     set: [Function: set],
     path: [Function: path],
     enabled: [Function: enabled],
     disabled: [Function: disabled],
     enable: [Function: enable],
     disable: [Function: disable],
     acl: [Function],
     bind: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     link: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcalendar: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     rebind: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unbind: [Function],
     unlink: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function: all],
     del: [Function],
     render: [Function: render],
     listen: [Function],
     request: IncomingMessage { app: [Circular] },
     response: ServerResponse { app: [Circular] },
     cache: {},
     engines: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: generateETag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/root/ducatus-payment/views',
        'jsonp callback name': 'callback',
        host: 'localhost',
        port: 3030,
        public: '/root/ducatus-payment/public',
        paginate: [Object],
        xpubkey: 'tpubDCBD69RSceww7zM5ZVA5RNgUVBR6qRVFrBnjihws2KXbwwxDfwwdXxQ69EPt46rHuUQHn5CVmfWJJivhW7ZDtbiXHyPsQC8qrNYLVTDveYJ',
        addressExpiresInMilli: 6000,
        nedb: '/root/ducatus-payment/data',
        'redis-get-address-index-sha1': '41e516f17a0b2e965d1db20a938d22096725a68c' },
     _eventsCount: 4,
     locals: { settings: [Object] },
     mountpath: '/',
     configure: [Function: configure],
     service: [Function: service],
     setup: [Function],
     version: '3.0.2',
     methods: [ 'find', 'get', 'create', 'update', 'patch', 'remove' ],
     mixins: 
      [ [Function: hookMixin],
        [Function: eventMixin],
        [Function],
        [Function] ],
     services: { request_payment: [Object] },
     providers: [ [Function] ],
     _setup: false,
     hookTypes: [ 'before', 'after', 'error', 'finally' ],
     hooks: [Function: hooks],
     eventMappings: 
      { create: 'created',
        update: 'updated',
        remove: 'removed',
        patch: 'patched' },
     _super: undefined,
     _router: 
      { [Function: router]
        params: {},
        _params: [],
        caseSensitive: false,
        mergeParams: undefined,
        strict: false,
        stack: [Array] },
     rest: 
      { find: [Function],
        get: [Function],
        create: [Function],
        update: [Function],
        patch: [Function],
        remove: [Function] },
     channel: [Function: channel],
     publish: [Function: publish],
     io: 
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Namespace],
        eio: [Server],
        httpServer: [Server],
        engine: [Server] },
     _isSetup: true,
     [Symbol(feathers-channels/channels)]: {},
     [Symbol(feathers-channels/publishers)]: { [Symbol(feathers-channels/all-events)]: [Function] } },
  method: 'create',
  path: 'request_payment' }
